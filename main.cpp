#include <iostream>
#include <cassert>
#include "bignumberlibrary.h"

using namespace std;

int main()
{
    BigNumber n(2);
    /* 2^33
     *  Expected: 8589934592
     *  Output:   8589934592 */
    cout << "2^33 = " << n.pow(33) << endl;
    n = 2;
    /* 2^100
     * Expected: 1267650600228229401496703205376
     * Output:   1267650600228229401496703205376 */
    cout << "2^100 = " << n.pow(100) << endl;
    n = 2;
    /* 2^222
     * Expected: 6739986666787659948666753771754907668409286105635143120275902562304
     *  Output:  6739986666787659948666753771754907668409286105635143120275902562304 */
    cout << "2^222 = " << n.pow(222) << endl;
    n = 3;
    /* 3^60
     * Expected: 42391158275216203514294433201
     * Output:   42391158275216203514294433201 */
    cout << "3^60 = " << n.pow(60) << endl;
    n = 3;
    /* 3^83
     * Expected: 3990838394187339929534246675572349035227
     * Output:   3990838394187339929534246675572349035227 */
    cout << "3^83 = " << n.pow(83) << endl;
    /* 2^222 * 2^222
     * Expected: 45427420268475430659332737993000283397102585042957378767593137448789955507087370207886940669610222847547657600391636120845912601788416
     * Output:   45427420268475430659332737993000283397102585042957378767593137448789955507087370207886940669610222847547657600391636120845912601788416  */
    n = 2;
    n.pow(222);
    cout << "2^222 * 2^222 = " << n * n << endl;
    /* 3^83 + 2^222
     * Expected: 6739986666787659948666753775745746062596626035169389795848251597531
     * Output:   6739986666787659948666753775745746062596626035169389795848251597531  */
    BigNumber n2(3);
    n = 2;
    cout << "3^83 + 2^222 = " << n.pow(222) + n2.pow(83) << endl;
    /* 10^500
     * Expected
     * Output
    n = 10;
    cout << "10^500 = " << n.pow(500) << endl;
    /* 81^45
     * Expected: 76177348045866392339289727720615561750424801402395196724001565744957137343033038019601
     * Output:   76177348045866392339289727720615561750424801402395196724001565744957137343033038019601 */
    n = 81;
    cout << "81^45 = " << n.pow(45) << endl;
    /* 100!
     * Expected: 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
     * Output:   93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000 */
    cout << "100! = " << n.fact(100) << endl;
    /* 100! + 100!
     * Expected: 186652430887888305363398477712533400981431936528763242937185927790435199986459831217882927952313036572507395841654447516502370421833728000000000000000000000000
     * Output:   186652430887888305363398477712533400981431936528763242937185927790435199986459831217882927952313036572507395841654447516502370421833728000000000000000000000000 */
    n.fact(100);
    n2.fact(100);
    cout << "100! + 100! = " << n + n2 << endl;
    /* 4^64 / 8^32
     * Expected: 4294967296
     * Output:    */
    n = 4;
    n2 = 8;
    cout << n.pow(64) / n2.pow(32) << endl;
}
